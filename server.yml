Description: > 
  Mohammed Salah / Deploy a high avaliblity web app (portofilo) using aws cloudformation

Parameters: 

  EnvironmentName:
    Description: An environment name that will prefixed to resource names
    Type: String
  
  InstanceType:
    Description: "The EC2 instance type of general purpose"
    Type: String
    AllowedValues: [t2.medium,t3.medium]

  AMI:
    Description: AMI to use for our base image
    Type: AWS::EC2::Image::Id




Resources:


  S3ReadOnlytEC2: 
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: 
        !Sub ${EnvironmentName}-Role
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
            - s3:Get*
            - s3:List*
            Resource: 
            - arn:aws:s3:::portfolio111/Portfolio-master.zip
      Roles: 
        - Ref: "S3ReadOnlytEC2"
  
  
  ProfileWithRoleForMyApp: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - Ref: "S3ReadOnlytEC2"



  LBSecGroup:   # load balancer security group
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http traffic to and form load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http and ssh to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        -   IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
        -   IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        -   IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0


  WebAppLaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
        UserData:
            Fn::Base64: !Sub |
                #!/bin/bash
                apt-get update -y
                apt-get install unzip awscli -y
                apt-get install apache2 -y
                systemctl start apache2.service
                cd /var/www/html
                aws s3 cp s3://portfolio111/Portfolio-master.zip .
                unzip -o Portfolio-master.zip
                
        ImageId: !Ref AMI 
        IamInstanceProfile: !Ref ProfileWithRoleForMyApp
        SecurityGroups:
        -   Ref: WebServerSecGroup
        InstanceType: !Ref 'InstanceType'
        BlockDeviceMappings:
        -   DeviceName: "/dev/sdk"
            Ebs:
                VolumeSize: '10' #10GB

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: 
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
        VPCZoneIdentifier:  
          - Fn::ImportValue:
              !Sub "${EnvironmentName}-PRIV-NET1"
          - Fn::ImportValue:
              !Sub "${EnvironmentName}-PRIV-NET2"
        LaunchConfigurationName:
            Ref: WebAppLaunchConfig
        MinSize: '4'
        MaxSize: '6'
        TargetGroupARNs:
        -   Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
        SecurityGroups:
        - Ref: LBSecGroup
        Subnets:
          - Fn::ImportValue:
              !Sub ${EnvironmentName}-PUB-NET1
          - Fn::ImportValue:
              !Sub ${EnvironmentName}-PUB-NET2


  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        DefaultActions:
        -   Type: forward
            TargetGroupArn:
                Ref: WebAppTargetGroup
        LoadBalancerArn:
            Ref: WebAppLB
        Port: 80
        Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        Actions:
        -   Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        -   Field: path-pattern
            Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1


Outputs:
      WebAppLoadBalancerDNSName:
        Description: DNS name or Public URL of the Load Balancer or Portfolio-master.zip
        Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName